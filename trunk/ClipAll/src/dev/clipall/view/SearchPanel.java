/**
* This file is part of dev.clipall.
*
* dev.clipall is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* You should have received a copy of the GNU General Public License
* along with dev.clipall.  If not, see <http://www.gnu.org/licenses/>.
*
* File      : SearchPanel.java
* Created   : Oct 28, 2009, 8:52:30 PM
*/

package dev.clipall.view;

import dev.clipall.Constants;
import dev.clipall.business.GenericLogic;
import dev.clipall.business.GenericMediator;
import dev.clipall.model.GenericModel;
import dev.clipall.model.Item;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Erol Hira
 */
public class SearchPanel extends javax.swing.JPanel {

    private static SearchPanel searchPanel = new SearchPanel();

    private SearchPanel(){
        initComponents();
        setListeners();
    }

    public static SearchPanel getInstance(){
        return searchPanel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSearchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSearchList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jCategoryLabel = new javax.swing.JLabel();
        jCategoryUpLabel = new javax.swing.JLabel();
        jCategoryDownLabel = new javax.swing.JLabel();
        jButtonNewKategory = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonDeleteItem = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(300, 180));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jSearchList.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jScrollPane1.setViewportView(jSearchList);

        jPanel1.setLayout(null);

        jCategoryLabel.setBackground(new java.awt.Color(153, 153, 255));
        jCategoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCategoryLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jCategoryLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCategoryLabel.setOpaque(true);
        jPanel1.add(jCategoryLabel);
        jCategoryLabel.setBounds(30, 0, 180, 23);

        jCategoryUpLabel.setBackground(new java.awt.Color(255, 153, 153));
        jCategoryUpLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jCategoryUpLabel.setIcon(new javax.swing.ImageIcon("D:\\dev\\projects\\sprojects\\ClipAll\\resources\\images\\up.png")); // NOI18N
        jCategoryUpLabel.setMaximumSize(new java.awt.Dimension(22, 24));
        jCategoryUpLabel.setMinimumSize(new java.awt.Dimension(22, 24));
        jCategoryUpLabel.setPreferredSize(new java.awt.Dimension(22, 24));
        jCategoryUpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCategoryUpLabelMouseClicked(evt);
            }
        });
        jPanel1.add(jCategoryUpLabel);
        jCategoryUpLabel.setBounds(4, 0, 26, 24);

        jCategoryDownLabel.setBackground(new java.awt.Color(255, 153, 153));
        jCategoryDownLabel.setIcon(new javax.swing.ImageIcon("D:\\dev\\projects\\sprojects\\ClipAll\\resources\\images\\down.png")); // NOI18N
        jCategoryDownLabel.setIconTextGap(0);
        jCategoryDownLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCategoryDownLabelMouseClicked(evt);
            }
        });
        jPanel1.add(jCategoryDownLabel);
        jCategoryDownLabel.setBounds(210, 0, 30, 24);

        jButtonNewKategory.setText("New Category");
        jButtonNewKategory.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jButtonNewKategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewKategoryActionPerformed(evt);
            }
        });

        jButtonSave.setText("Save");
        jButtonSave.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jButtonSave.setMaximumSize(new java.awt.Dimension(89, 23));
        jButtonSave.setMinimumSize(new java.awt.Dimension(89, 23));
        jButtonSave.setPreferredSize(new java.awt.Dimension(89, 23));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonDeleteItem.setText("Delete");
        jButtonDeleteItem.setMargin(new java.awt.Insets(2, 7, 2, 7));
        jButtonDeleteItem.setMaximumSize(new java.awt.Dimension(89, 23));
        jButtonDeleteItem.setMinimumSize(new java.awt.Dimension(89, 23));
        jButtonDeleteItem.setPreferredSize(new java.awt.Dimension(89, 23));
        jButtonDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jButtonNewKategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addComponent(jSearchField, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDeleteItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonNewKategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewKategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewKategoryActionPerformed
        newCategoryEvent();
    }//GEN-LAST:event_jButtonNewKategoryActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GenericLogic.getInstance().saveToXML(Constants.DEFAULT_HISTORY_FILE);
            }
        });
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteItemActionPerformed
        deleteItem();
    }//GEN-LAST:event_jButtonDeleteItemActionPerformed

    private void jCategoryDownLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCategoryDownLabelMouseClicked
        GenericModel.getInstance().setNextCategory();
    }//GEN-LAST:event_jCategoryDownLabelMouseClicked

    private void jCategoryUpLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCategoryUpLabelMouseClicked
        GenericModel.getInstance().setPreviousCategory();
    }//GEN-LAST:event_jCategoryUpLabelMouseClicked

    private void deleteItem(){

        int selectedIndex = jSearchList.getSelectedIndex();
        if(selectedIndex >= 0){
            Item item = GenericModel.getInstance().getSearchListItemsOfCurrentCategory(jSearchField.getText()).get(selectedIndex);
            GenericMediator.getInstance().deleteItemEvent(item);
        }

        int listSize = GenericModel.getInstance().getSearchListItemsOfCurrentCategory(jSearchField.getText()).size();
        if(listSize > 0){
            jSearchList.setSelectedIndex(selectedIndex);
        }        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteItem;
    private javax.swing.JButton jButtonNewKategory;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jCategoryDownLabel;
    private javax.swing.JLabel jCategoryLabel;
    private javax.swing.JLabel jCategoryUpLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jSearchField;
    private javax.swing.JList jSearchList;
    // End of variables declaration//GEN-END:variables

    public void setCurrentCategoryLabel(){
        jCategoryLabel.setText(GenericModel.getInstance().getCurrentCategory().getName());
    }

    public void updateJSearchList(){
        String str = jSearchField.getText();
        updateJSearchList(str);
    }

    public void updateJSearchList(String str){
        jSearchList.setListData(GenericModel.getInstance().getSearchListItemsOfCurrentCategory(str).toArray());
    }

    public void updateSearchPanelFields(){

        setCurrentCategoryLabel();
        updateJSearchList();
    }

    public int getSelectedItemIndex(){
        return jSearchList.getSelectedIndex();
    }

    private void newCategoryEvent() {
        CategoryForm.displayNewInstance();
    }

    private void setListeners() {

        registerKeyboardAction(new EscapeKeyActionListener(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), WHEN_IN_FOCUSED_WINDOW);
        registerKeyboardAction(new CategoryNavigateActionListener(KeyEvent.VK_UP), KeyStroke.getKeyStroke(KeyEvent.VK_UP, InputEvent.CTRL_MASK), WHEN_IN_FOCUSED_WINDOW);
        registerKeyboardAction(new CategoryNavigateActionListener(KeyEvent.VK_DOWN), KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.CTRL_MASK), WHEN_IN_FOCUSED_WINDOW);
        registerKeyboardAction(new SearchListNavigateActionListener(KeyEvent.VK_DOWN), KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), WHEN_IN_FOCUSED_WINDOW);
        registerKeyboardAction(new SearchListNavigateActionListener(KeyEvent.VK_UP), KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), WHEN_IN_FOCUSED_WINDOW);
        jSearchList.addKeyListener(new SearchListListener());

        jSearchField.getDocument().addDocumentListener(

            new DocumentListener() {

                private void updateTextField(){
                    try {
                        javax.swing.text.Document doc = jSearchField.getDocument();
                        String text = doc.getText(0, doc.getLength());
                        updateJSearchList(text);
                    } catch (BadLocationException ex) {
                        ex.printStackTrace();
                    }
                }

                public void insertUpdate(DocumentEvent e) { // FIXME  think about calling outside from event-dispatch thred
                    updateTextField();
                }                

                public void changedUpdate(DocumentEvent e) {// FIXME  think about calling outside from event-dispatch thred
                    updateTextField();
                }

                public void removeUpdate(DocumentEvent e) {
                    updateTextField();
                }
            }
        );
    }
    
    //------------------------------------------------------

    class SearchListListener implements KeyListener {

        public void keyTyped(KeyEvent e) {            
        }

        public void keyPressed(KeyEvent e) {
            if(KeyEvent.VK_ENTER == e.getKeyCode()){
                GenericMediator.getInstance().enterPressedOnSearchListEvent();
            } else if(KeyEvent.VK_DELETE == e.getKeyCode()){
                deleteItem();
            }
        }
        
        public void keyReleased(KeyEvent e) {
        }
    }

    class EscapeKeyActionListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            SearchFrame.getInstance().hideSearchFrame();
        }
        
    }

    class CategoryNavigateActionListener implements ActionListener {

        private int key;

        public CategoryNavigateActionListener(int key){
            this.key = key;
        }

        public void actionPerformed(ActionEvent e) {

            if(KeyEvent.VK_UP == key){

                GenericModel.getInstance().setPreviousCategory();

            } else if(KeyEvent.VK_DOWN == key){

                GenericModel.getInstance().setNextCategory();
            }
        }
    }

    class SearchListNavigateActionListener implements ActionListener {

        private int key;

        public SearchListNavigateActionListener(int key){
            this.key = key;
        }

        public void actionPerformed(ActionEvent e) {
            
            if(jSearchList.isFocusOwner() == false){
                jSearchList.requestFocusInWindow();                
            }
        }
    }
    
}
